<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RPConnect - OTP Verification</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;600;700&family=Roboto+Mono:wght@300;400&display=swap" rel="stylesheet">
    <style>
        :root {
            --rp-green: #006341;
            --rp-green-light: #008050;
            --rp-green-dark: #004d33;
            --rp-black: #121212;
            --rp-white: #ffffff;
            --rp-gray: #f5f5f5;
            --rp-light-gray: #e0e0e0;
            --error-red: #ff4444;
            --success-green: #00C851;
        }
        
        body {
            margin: 0;
            padding: 0;
            font-family: 'Montserrat', sans-serif;
            background-color: var(--rp-gray);
            color: var(--rp-black);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background-image: 
                radial-gradient(circle at 25% 25%, var(--rp-green) 0%, transparent 50%),
                radial-gradient(circle at 75% 75%, var(--rp-green-light) 0%, transparent 50%);
        }

        .otp-container {
            width: 100%;
            max-width: 500px;
            background: var(--rp-white);
            padding: 60px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            position: relative;
            overflow: hidden;
        }

        .otp-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(0, 99, 65, 0.05) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 99, 65, 0.05) 1px, transparent 1px);
            background-size: 40px 40px;
            z-index: 1;
            opacity: 0.3;
        }

        .otp-header {
            margin-bottom: 40px;
            text-align: center;
            position: relative;
            z-index: 2;
        }

        .otp-header h1 {
            font-size: 28px;
            font-weight: 700;
            color: var(--rp-black);
            margin-bottom: 10px;
        }

        .otp-header p {
            color: #666;
            font-size: 14px;
        }

        .otp-header .email {
            font-weight: 600;
            color: var(--rp-green);
        }

        .otp-form {
            width: 100%;
            position: relative;
            z-index: 2;
        }

        .otp-inputs {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
            gap: 10px;
        }

        .otp-input {
            width: 50px;
            height: 60px;
            text-align: center;
            font-size: 24px;
            font-weight: 600;
            border: 1px solid var(--rp-light-gray);
            border-radius: 6px;
            background-color: var(--rp-gray);
            transition: all 0.3s;
        }

        .otp-input:focus {
            outline: none;
            border-color: var(--rp-green);
            box-shadow: 0 0 0 2px rgba(0, 99, 65, 0.2);
            background-color: var(--rp-white);
        }

        .btn-verify {
            width: 100%;
            padding: 16px;
            background-color: var(--rp-green);
            color: var(--rp-white);
            border: none;
            border-radius: 6px;
            font-family: 'Montserrat', sans-serif;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn-verify:hover {
            background-color: var(--rp-green-dark);
            transform: translateY(-2px);
        }

        .btn-verify:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
            transform: none;
        }

        .resend-link {
            margin-top: 20px;
            text-align: center;
            font-size: 13px;
            color: #666;
        }

        .resend-link a {
            color: var(--rp-green);
            text-decoration: none;
            font-weight: 600;
        }

        .resend-link .timer {
            color: var(--rp-green);
            font-weight: 600;
        }

        .tech-circle {
            position: absolute;
            border-radius: 50%;
            background: rgba(0, 99, 65, 0.1);
            z-index: 1;
        }

        @media (max-width: 768px) {
            .otp-container {
                padding: 40px;
                margin: 20px;
            }
            
            .otp-input {
                width: 40px;
                height: 50px;
                font-size: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="otp-container">
        <!-- Dynamic background elements -->
        <div class="tech-circle" style="width: 200px; height: 200px; top: -50px; right: -50px;"></div>
        <div class="tech-circle" style="width: 150px; height: 150px; bottom: 30px; left: 30px;"></div>
        
        <div class="otp-header">
            <svg viewBox="0 0 200 40" xmlns="http://www.w3.org/2000/svg" style="width: 180px; margin-bottom: 20px;">
                <text x="0" y="35" font-family="Montserrat" font-size="40" font-weight="700" fill="#006341">RPCONNECT</text>
            </svg>
            <h1>Enter Verification Code</h1>
            <p>We've sent a 6-digit code to <span class="email" id="userEmail">user@rp.edu.sg</span></p>
        </div>
        
        <form class="otp-form" id="otpForm">
            <div class="otp-inputs">
                <input type="text" class="otp-input" maxlength="1" data-index="1" inputmode="numeric" pattern="[0-9]*">
                <input type="text" class="otp-input" maxlength="1" data-index="2" inputmode="numeric" pattern="[0-9]*">
                <input type="text" class="otp-input" maxlength="1" data-index="3" inputmode="numeric" pattern="[0-9]*">
                <input type="text" class="otp-input" maxlength="1" data-index="4" inputmode="numeric" pattern="[0-9]*">
                <input type="text" class="otp-input" maxlength="1" data-index="5" inputmode="numeric" pattern="[0-9]*">
                <input type="text" class="otp-input" maxlength="1" data-index="6" inputmode="numeric" pattern="[0-9]*">
            </div>
            
            <button type="submit" class="btn-verify" id="verifyBtn" disabled>VERIFY</button>
            
            <div class="resend-link">
                <p>Didn't receive code? <a href="#" id="resendLink">Resend</a> <span id="timer" class="timer"></span></p>
            </div>
        </form>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Create additional dynamic tech circles
            const container = document.querySelector('.otp-container');
            for (let i = 0; i < 2; i++) {
                const circle = document.createElement('div');
                circle.classList.add('tech-circle');
                
                const size = Math.random() * 100 + 50;
                const posX = Math.random() * 100;
                const posY = Math.random() * 100;
                const opacity = Math.random() * 0.1 + 0.05;
                
                circle.style.width = `${size}px`;
                circle.style.height = `${size}px`;
                circle.style.left = `${posX}%`;
                circle.style.top = `${posY}%`;
                circle.style.opacity = opacity;
                circle.style.background = `rgba(0, 99, 65, ${opacity})`;
                
                container.appendChild(circle);
            }
            
            // Get URL parameters (for email display)
            const urlParams = new URLSearchParams(window.location.search);
            const email = urlParams.get('email') || 'user@rp.edu.sg';
            document.getElementById('userEmail').textContent = email;
            
            // OTP input handling
            const otpInputs = document.querySelectorAll('.otp-input');
            const verifyBtn = document.getElementById('verifyBtn');
            const otpForm = document.getElementById('otpForm');
            const resendLink = document.getElementById('resendLink');
            const timerDisplay = document.getElementById('timer');
            
            // Auto-focus first input
            otpInputs[0].focus();
            
            // Handle OTP input navigation
            otpInputs.forEach((input, index) => {
                input.addEventListener('input', (e) => {
                    // Only allow numbers
                    e.target.value = e.target.value.replace(/[^0-9]/g, '');
                    
                    // Move to next input if current has value
                    if (e.target.value && index < otpInputs.length - 1) {
                        otpInputs[index + 1].focus();
                    }
                    
                    // Enable verify button if all fields are filled
                    checkOTPComplete();
                });
                
                input.addEventListener('keydown', (e) => {
                    // Move to previous input on backspace if current is empty
                    if (e.key === 'Backspace' && !e.target.value && index > 0) {
                        otpInputs[index - 1].focus();
                    }
                });
            });
            
            function checkOTPComplete() {
                const allFilled = Array.from(otpInputs).every(input => input.value);
                verifyBtn.disabled = !allFilled;
            }
            
            // Form submission
            otpForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Get OTP code
                let otpCode = '';
                otpInputs.forEach(input => {
                    otpCode += input.value;
                });
                
                // Disable button during verification
                verifyBtn.disabled = true;
                verifyBtn.textContent = 'Verifying...';
                
                // Simulate verification
                setTimeout(() => {
                    // In a real implementation, you would verify the OTP with your backend
                    console.log('OTP submitted:', otpCode);
                    
                    // Simulate success
                    alert('Verification successful! Redirecting...');
                    // window.location.href = 'reset-password.html?email=' + encodeURIComponent(email);
                    
                    // Reset button state
                    verifyBtn.textContent = 'VERIFY';
                    verifyBtn.disabled = false;
                }, 1500);
            });
            
            // Resend OTP functionality
            let countdown = 30;
            
            function updateTimer() {
                if (countdown > 0) {
                    timerDisplay.textContent = `(Wait ${countdown}s)`;
                    countdown--;
                    setTimeout(updateTimer, 1000);
                    resendLink.style.pointerEvents = 'none';
                    resendLink.style.opacity = '0.5';
                } else {
                    timerDisplay.textContent = '';
                    resendLink.style.pointerEvents = 'auto';
                    resendLink.style.opacity = '1';
                }
            }
            
            // Start initial timer
            updateTimer();
            
            resendLink.addEventListener('click', function(e) {
                e.preventDefault();
                
                if (countdown > 0) return;
                
                // Reset countdown
                countdown = 30;
                updateTimer();
                
                // Simulate resend
                alert(`New OTP code sent to ${email}`);
                
                // In a real implementation, you would request a new OTP from your backend
                console.log('Resending OTP to:', email);
            });
        });
    </script>
</body>
</html>
